# Base params
SERVER_HOST=0.0.0.0
SERVER_PORT=8080
ORD_BASE_URL=http://127.0.0.1:8080
ORD_SOURCE_TYPE=local
ORD_DIRECTORY=./example
ORD_DOCUMENTS_SUBDIRECTORY=documents
ORD_AUTH_TYPE=open

# Optional: Github configuration
GITHUB_TOKEN=
GITHUB_API_URL=https://api.github.com
GITHUB_REPOSITORY=owner/repo
GITHUB_BRANCH=main

# Optional: local dev allow all CORS
CORS=*

# Github static file serving configuration
ORD_DATA_DIR=./data
WEBHOOK_SECRET=
UPDATE_DELAY=30
STATUS_DASHBOARD_ENABLED=true

# BASIC_AUTH: JSON string mapping usernames to hashed bcrypt passwords.
# User: `admin`, password: `secret`
BASIC_AUTH='{"admin":"$2y$10$EwsT83iCpr/4r/pJj0G53eNk8fZ/Ldb8TDiuou7ciL8MgsaS4Xd.2"}'

# mTLS Configuration (Only SAP CF mode is supported)

# MTLS_MODE: Only 'sap:cmp-mtls' is supported for Cloud Foundry environments with proxy-based mTLS
MTLS_MODE=sap:cmp-mtls

# MTLS_DECODE_BASE64_HEADERS: Whether to decode base64-encoded headers (default: true for SAP CF)
MTLS_DECODE_BASE64_HEADERS=true

# MTLS_CA_CHAIN_FILE: CA certificate chain definitions (required when using mTLS)
# Can be provided in two ways:
#   1. File path: Path to a JSON file containing the certificate chain
#      Example: MTLS_CA_CHAIN_FILE=./ca-chain.json
#   2. Inline JSON: JSON array directly in the environment variable
#      Example: MTLS_CA_CHAIN_FILE='[{"name":"Root CA","url":"https://example.com/ca.crt"}]'
# Array format: [{"name": "CA Name", "url": "https://..."}]
MTLS_CA_CHAIN_FILE=

# MTLS_TRUSTED_ISSUERS: Optional semicolon-separated list of trusted certificate issuer DNs
# Only certificates issued by these CAs will be accepted (in addition to chain validation)
# Example: MTLS_TRUSTED_ISSUERS="CN=SAP CA,O=SAP,C=DE;CN=Partner CA,O=Partner,C=US"
# Note: DN order doesn't matter, token matching is used
MTLS_TRUSTED_ISSUERS=

# MTLS_TRUSTED_SUBJECTS: Optional semicolon-separated list of trusted certificate subject DNs
# Only certificates with these subjects will be accepted (in addition to chain validation)
# Example: MTLS_TRUSTED_SUBJECTS="CN=client-app-1,O=MyOrg,C=DE;CN=client-app-2,O=MyOrg,C=DE"
# Note: DN order doesn't matter, token matching is used
MTLS_TRUSTED_SUBJECTS=

# MTLS_CONFIG_ENDPOINTS: Optional semicolon-separated list of URLs to fetch trusted cert info from
# Each endpoint should return JSON: {"certIssuer": "...", "certSubject": "..."}
# Example: MTLS_CONFIG_ENDPOINTS="https://config-service/cert-info;https://backup-config/cert-info"
# Note: Trusted issuers/subjects from endpoints are merged with those from environment variables
# IMPORTANT: Either MTLS_CONFIG_ENDPOINTS or MTLS_TRUSTED_ISSUERS/MTLS_TRUSTED_SUBJECTS must be configured
MTLS_CONFIG_ENDPOINTS=
